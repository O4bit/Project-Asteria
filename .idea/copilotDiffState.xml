<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- Internet permission to fetch NASA API data --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#10;&#10;    &lt;!-- Notification permissions --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#10;&#10;    &lt;!-- For background work scheduling --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&#10;&#10;    &lt;!-- Permission to set wallpapers --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.SET_WALLPAPER&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AsteriaApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@drawable/ic_asteria_logo&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@drawable/ic_asteria_logo&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:enableOnBackInvokedCallback=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.ProjectAsteria&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.ProjectAsteria&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- Firebase Messaging Service --&gt;&#10;        &lt;service&#10;            android:name=&quot;.data.notification.SpaceMessagingService&quot;&#10;            android:exported=&quot;false&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;com.google.firebase.MESSAGING_EVENT&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/service&gt;&#10;&#10;        &lt;!-- WorkManager initialization --&gt;&#10;        &lt;provider&#10;            android:name=&quot;androidx.startup.InitializationProvider&quot;&#10;            android:authorities=&quot;${applicationId}.androidx-startup&quot;&#10;            android:exported=&quot;false&quot;&#10;            tools:node=&quot;merge&quot;&gt;&#10;            &lt;meta-data&#10;                android:name=&quot;androidx.work.WorkManagerInitializer&quot;&#10;                android:value=&quot;androidx.startup&quot;&#10;                tools:node=&quot;remove&quot; /&gt;&#10;        &lt;/provider&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- Internet permission to fetch NASA API data --&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- Notification permissions --&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- For background work scheduling --&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- Permission to set wallpapers --&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.SET_WALLPAPER&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.AsteriaApplication&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@drawable/ic_asteria_logo&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@drawable/ic_asteria_logo&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.ProjectAsteria&quot;&#13;&#10;        tools:targetApi=&quot;33&quot;&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:theme=&quot;@style/Theme.ProjectAsteria&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;        &lt;!-- Firebase Messaging Service --&gt;&#13;&#10;        &lt;service&#13;&#10;            android:name=&quot;.data.notification.SpaceMessagingService&quot;&#13;&#10;            android:exported=&quot;false&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;com.google.firebase.MESSAGING_EVENT&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/service&gt;&#13;&#10;&#13;&#10;        &lt;!-- WorkManager initialization --&gt;&#13;&#10;        &lt;provider&#13;&#10;            android:name=&quot;androidx.startup.InitializationProvider&quot;&#13;&#10;            android:authorities=&quot;${applicationId}.androidx-startup&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            tools:node=&quot;merge&quot;&gt;&#13;&#10;            &lt;meta-data&#13;&#10;                android:name=&quot;androidx.work.WorkManagerInitializer&quot;&#13;&#10;                android:value=&quot;androidx.startup&quot;&#13;&#10;                tools:node=&quot;remove&quot; /&gt;&#13;&#10;        &lt;/provider&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/data/preferences/ThemePreferencesRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/data/preferences/ThemePreferencesRepository.kt" />
              <option name="updatedContent" value="package space.o4bit.projectasteria.data.preferences&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.core.booleanPreferencesKey&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;&#10;// Extension property to get DataStore instance&#10;val Context.themeDataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = &quot;theme_preferences&quot;)&#10;&#10;// Theme preference repository - simplified to just handle dark mode toggle&#10;class ThemePreferencesRepository(private val context: Context) {&#10;&#10;    // Keys for preferences&#10;    companion object {&#10;        private val DARK_MODE_KEY = booleanPreferencesKey(&quot;dark_mode&quot;)&#10;        private val FOLLOW_SYSTEM_KEY = booleanPreferencesKey(&quot;follow_system&quot;)&#10;&#10;        // Default is to follow system&#10;        const val DEFAULT_FOLLOW_SYSTEM = true&#10;    }&#10;&#10;    // Get whether to use dark mode&#10;    val isDarkMode: Flow&lt;Boolean&gt; = context.themeDataStore.data.map { preferences -&gt;&#10;        preferences[DARK_MODE_KEY] ?: false&#10;    }&#10;&#10;    // Get whether to follow system setting&#10;    val followSystem: Flow&lt;Boolean&gt; = context.themeDataStore.data.map { preferences -&gt;&#10;        preferences[FOLLOW_SYSTEM_KEY] ?: DEFAULT_FOLLOW_SYSTEM&#10;    }&#10;&#10;    // Update dark mode preference&#10;    suspend fun updateDarkMode(isDark: Boolean) {&#10;        context.themeDataStore.edit { preferences -&gt;&#10;            preferences[DARK_MODE_KEY] = isDark&#10;        }&#10;    }&#10;&#10;    // Update follow system preference&#10;    suspend fun updateFollowSystem(follow: Boolean) {&#10;        context.themeDataStore.edit { preferences -&gt;&#10;            preferences[FOLLOW_SYSTEM_KEY] = follow&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/components/AstronomyPictureCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/components/AstronomyPictureCard.kt" />
              <option name="originalContent" value="package space.o4bit.projectasteria.ui.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.rounded.DateRange&#10;import androidx.compose.material.icons.rounded.Info&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ElevatedCard&#10;import androidx.compose.material3.FilledTonalIconButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import kotlinx.coroutines.delay&#10;import space.o4bit.projectasteria.data.model.EnhancedAstronomyPicture&#10;&#10;/**&#10; * A card displaying the astronomy picture of the day with its details&#10; */&#10;@Composable&#10;fun AstronomyPictureCard(&#10;    enhancedPicture: EnhancedAstronomyPicture,&#10;    onShareClick: () -&gt; Unit = {},&#10;    onCardClick: () -&gt; Unit = {},&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val astronomyPicture = enhancedPicture.astronomyPicture&#10;    var isImageLoaded by remember { mutableStateOf(false) }&#10;    var showContent by remember { mutableStateOf(false) }&#10;&#10;    // Format the date&#10;    val dateFormat = java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;, java.util.Locale.US)&#10;    val displayFormat = java.text.SimpleDateFormat(&quot;MMMM d, yyyy&quot;, java.util.Locale.US)&#10;    val formattedDate = try {&#10;        val date = dateFormat.parse(astronomyPicture.date)&#10;        date?.let { displayFormat.format(it) } ?: astronomyPicture.date&#10;    } catch (e: Exception) {&#10;        astronomyPicture.date&#10;    }&#10;&#10;    // Staggered animations&#10;    LaunchedEffect(isImageLoaded) {&#10;        if (isImageLoaded) {&#10;            delay(300)&#10;            showContent = true&#10;        }&#10;    }&#10;&#10;    ElevatedCard(&#10;        onClick = onCardClick,&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.elevatedCardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;        ),&#10;        elevation = CardDefaults.elevatedCardElevation(&#10;            defaultElevation = 6.dp,&#10;            pressedElevation = 8.dp,&#10;            focusedElevation = 8.dp&#10;        )&#10;    ) {&#10;        Box(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            // Astronomy image&#10;            AsyncImage(&#10;                model = ImageRequest.Builder(LocalContext.current)&#10;                    .data(astronomyPicture.url)&#10;                    .crossfade(true)&#10;                    .build(),&#10;                contentDescription = astronomyPicture.title,&#10;                contentScale = ContentScale.Crop,&#10;                onSuccess = { isImageLoaded = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp)&#10;                    .clip(RoundedCornerShape(24.dp))&#10;            )&#10;&#10;            // Semi-transparent gradient overlay for better text readability&#10;            Box(&#10;                modifier = Modifier&#10;                    .matchParentSize()&#10;                    .background(&#10;                        brush = Brush.verticalGradient(&#10;                            colors = listOf(&#10;                                Color.Transparent,&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.3f),&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.7f),&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                            )&#10;                        )&#10;                    )&#10;                    .clip(RoundedCornerShape(24.dp))&#10;            )&#10;&#10;            // Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .matchParentSize()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // Top section with date&#10;                AnimatedVisibility(&#10;                    visible = showContent,&#10;                    enter = fadeIn(tween(500)) + slideInVertically(tween(500)) { it / 2 }&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier&#10;                            .clip(RoundedCornerShape(50))&#10;                            .background(MaterialTheme.colorScheme.surfaceContainer.copy(alpha = 0.8f))&#10;                            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Rounded.DateRange,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&#10;                            text = formattedDate,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Bottom section with title and actions&#10;                AnimatedVisibility(&#10;                    visible = showContent,&#10;                    enter = fadeIn(tween(700)) + slideInVertically(tween(700)) { it / 2 }&#10;                ) {&#10;                    Column {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.Bottom&#10;                        ) {&#10;                            // Title&#10;                            Text(&#10;                                text = astronomyPicture.title,&#10;                                style = MaterialTheme.typography.titleLarge,&#10;                                color = MaterialTheme.colorScheme.onSurface,&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;&#10;                            // Share button&#10;                            FilledTonalIconButton(&#10;                                onClick = onShareClick,&#10;                                modifier = Modifier.size(40.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Share,&#10;                                    contentDescription = &quot;Share&quot;,&#10;                                    tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        // Space fact&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier&#10;                                .clip(RoundedCornerShape(12.dp))&#10;                                .background(MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.7f))&#10;                                .padding(12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Rounded.Info,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.secondary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                text = enhancedPicture.shortFact,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * A card displaying the explanation for an astronomy picture&#10; */&#10;@Composable&#10;fun AstronomyExplanationCard(&#10;    explanation: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    ElevatedCard(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.elevatedCardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainerHigh&#10;        ),&#10;        elevation = CardDefaults.elevatedCardElevation(&#10;            defaultElevation = 2.dp&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;About this image&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = explanation,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package space.o4bit.projectasteria.ui.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Share&#10;import androidx.compose.material.icons.rounded.DateRange&#10;import androidx.compose.material.icons.rounded.Info&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ElevatedCard&#10;import androidx.compose.material3.FilledTonalIconButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import kotlinx.coroutines.delay&#10;import space.o4bit.projectasteria.data.model.EnhancedAstronomyPicture&#10;&#10;/**&#10; * A card displaying the astronomy picture of the day with its details&#10; */&#10;@Composable&#10;fun AstronomyPictureCard(&#10;    enhancedPicture: EnhancedAstronomyPicture,&#10;    onShareClick: () -&gt; Unit = {},&#10;    onCardClick: () -&gt; Unit = {},&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val astronomyPicture = enhancedPicture.astronomyPicture&#10;    var isImageLoaded by remember { mutableStateOf(false) }&#10;    var showContent by remember { mutableStateOf(false) }&#10;&#10;    // Format the date&#10;    val dateFormat = java.text.SimpleDateFormat(&quot;yyyy-MM-dd&quot;, java.util.Locale.US)&#10;    val displayFormat = java.text.SimpleDateFormat(&quot;MMMM d, yyyy&quot;, java.util.Locale.US)&#10;    val formattedDate = try {&#10;        val date = dateFormat.parse(astronomyPicture.date)&#10;        date?.let { displayFormat.format(it) } ?: astronomyPicture.date&#10;    } catch (e: Exception) {&#10;        astronomyPicture.date&#10;    }&#10;&#10;    // Staggered animations&#10;    LaunchedEffect(isImageLoaded) {&#10;        if (isImageLoaded) {&#10;            delay(300)&#10;            showContent = true&#10;        }&#10;    }&#10;&#10;    ElevatedCard(&#10;        onClick = onCardClick,&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.elevatedCardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainerLow&#10;        ),&#10;        elevation = CardDefaults.elevatedCardElevation(&#10;            defaultElevation = 6.dp,&#10;            pressedElevation = 8.dp,&#10;            focusedElevation = 8.dp&#10;        )&#10;    ) {&#10;        Box(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            // Astronomy image&#10;            AsyncImage(&#10;                model = ImageRequest.Builder(LocalContext.current)&#10;                    .data(astronomyPicture.url)&#10;                    .crossfade(true)&#10;                    .build(),&#10;                contentDescription = astronomyPicture.title,&#10;                contentScale = ContentScale.Crop,&#10;                onSuccess = { isImageLoaded = true },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp)&#10;                    .clip(RoundedCornerShape(24.dp))&#10;            )&#10;&#10;            // Semi-transparent gradient overlay for better text readability&#10;            Box(&#10;                modifier = Modifier&#10;                    .matchParentSize()&#10;                    .background(&#10;                        brush = Brush.verticalGradient(&#10;                            colors = listOf(&#10;                                Color.Transparent,&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.3f),&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.7f),&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.9f)&#10;                            )&#10;                        )&#10;                    )&#10;                    .clip(RoundedCornerShape(24.dp))&#10;            )&#10;&#10;            // Content&#10;            Column(&#10;                modifier = Modifier&#10;                    .matchParentSize()&#10;                    .padding(16.dp),&#10;                verticalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // Top section with date&#10;                AnimatedVisibility(&#10;                    visible = showContent,&#10;                    enter = fadeIn(tween(500)) + slideInVertically(tween(500)) { it / 2 }&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        modifier = Modifier&#10;                            .clip(RoundedCornerShape(50))&#10;                            .background(MaterialTheme.colorScheme.surfaceContainer.copy(alpha = 0.8f))&#10;                            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Rounded.DateRange,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&#10;                            text = formattedDate,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Bottom section with title and actions&#10;                AnimatedVisibility(&#10;                    visible = showContent,&#10;                    enter = fadeIn(tween(700)) + slideInVertically(tween(700)) { it / 2 }&#10;                ) {&#10;                    Column {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.Bottom&#10;                        ) {&#10;                            // Title&#10;                            Text(&#10;                                text = astronomyPicture.title,&#10;                                style = MaterialTheme.typography.titleLarge,&#10;                                color = MaterialTheme.colorScheme.onSurface,&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;&#10;                            // Share button&#10;                            FilledTonalIconButton(&#10;                                onClick = onShareClick,&#10;                                modifier = Modifier.size(40.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Share,&#10;                                    contentDescription = &quot;Share&quot;,&#10;                                    tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                        // Space fact&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier&#10;                                .clip(RoundedCornerShape(12.dp))&#10;                                .background(MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.7f))&#10;                                .padding(12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Rounded.Info,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.secondary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                text = enhancedPicture.shortFact,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * A card displaying the explanation for an astronomy picture&#10; */&#10;@Composable&#10;fun AstronomyExplanationCard(&#10;    explanation: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    ElevatedCard(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.elevatedCardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceContainerHigh&#10;        ),&#10;        elevation = CardDefaults.elevatedCardElevation(&#10;            defaultElevation = 2.dp&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;About this image&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = explanation,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/components/OssLicensesScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/components/OssLicensesScreen.kt" />
              <option name="originalContent" value="package space.o4bit.projectasteria.ui.components&#10;&#10;import androidx.compose.runtime.Composable&#10;&#10;/**&#10; * This composable is deprecated and should not be used.&#10; * Instead, use LibrariesScreen for displaying open source licenses.&#10; *&#10; * @see LibrariesScreen&#10; */&#10;@Deprecated(&quot;Use LibrariesScreen instead&quot;, ReplaceWith(&quot;LibrariesScreen(onBackPressed)&quot;))&#10;@Composable&#10;fun OssLicensesLauncher() {&#10;    // This implementation is intentionally empty&#10;    // The project now uses AboutLibraries instead of Google OSS Licenses&#10;}&#10;" />
              <option name="updatedContent" value="package space.o4bit.projectasteria.ui.components&#13;&#10;&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;&#13;&#10;/**&#13;&#10; * This composable is deprecated and should not be used.&#13;&#10; * &#13;&#10; * @deprecated This component is no longer supported&#13;&#10; */&#13;&#10;@Deprecated(&quot;Use the LibrariesScreen component instead&quot;, level = DeprecationLevel.WARNING)&#13;&#10;@Composable&#13;&#10;fun OssLicensesLauncher() {&#13;&#10;    // This implementation is intentionally empty&#13;&#10;    // The project now uses AboutLibraries instead of Google OSS Licenses&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/components/StarryBackground.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/components/StarryBackground.kt" />
              <option name="originalContent" value="package space.o4bit.projectasteria.ui.components&#10;&#10;import androidx.compose.animation.core.LinearEasing&#10;import androidx.compose.animation.core.RepeatMode&#10;import androidx.compose.animation.core.animateFloat&#10;import androidx.compose.animation.core.infiniteRepeatable&#10;import androidx.compose.animation.core.rememberInfiniteTransition&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.BoxScope&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import kotlin.math.min&#10;import kotlin.random.Random&#10;&#10;/**&#10; * A composable that creates a starry space background with subtle animation&#10; * that aligns with Material 3 theming&#10; */&#10;@Composable&#10;fun StarryBackground(&#10;    modifier: Modifier = Modifier,&#10;    starsCount: Int = 100,&#10;    content: @Composable BoxScope.() -&gt; Unit&#10;) {&#10;    // Get theme colors to use for the space background gradient&#10;    val surfaceColor = MaterialTheme.colorScheme.surface&#10;    val primaryColor = MaterialTheme.colorScheme.primary&#10;    val secondaryColor = MaterialTheme.colorScheme.secondary&#10;    val tertiaryColor = MaterialTheme.colorScheme.tertiary&#10;&#10;    // Background gradient using theme colors for better integration with Material 3&#10;    val backgroundGradient = Brush.verticalGradient(&#10;        colors = listOf(&#10;            surfaceColor.copy(alpha = 0.95f),   // Slightly transparent surface color&#10;            surfaceColor,                       // Base surface color&#10;            surfaceColor.copy(alpha = 0.9f)     // Slightly different shade for gradient effect&#10;        )&#10;    )&#10;&#10;    // Generate random stars positions&#10;    val stars = remember {&#10;        List(starsCount) {&#10;            Star(&#10;                x = Random.nextFloat(),&#10;                y = Random.nextFloat(),&#10;                size = Random.nextFloat() * 2.5f + 0.5f,&#10;                alpha = Random.nextFloat() * 0.7f + 0.3f&#10;            )&#10;        }&#10;    }&#10;&#10;    // Nebula positions for subtle color accents using theme colors&#10;    val nebulae = remember {&#10;        List(3) {&#10;            Nebula(&#10;                x = Random.nextFloat(),&#10;                y = Random.nextFloat(),&#10;                radius = Random.nextFloat() * 0.2f + 0.1f,&#10;                color = when (it % 3) {&#10;                    0 -&gt; primaryColor.copy(alpha = 0.1f)     // Very subtle primary color&#10;                    1 -&gt; secondaryColor.copy(alpha = 0.1f)   // Very subtle secondary color&#10;                    else -&gt; tertiaryColor.copy(alpha = 0.1f) // Very subtle tertiary color&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Animation for twinkling stars&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;starTwinkle&quot;)&#10;    val twinkleAnimation = infiniteTransition.animateFloat(&#10;        initialValue = 0.7f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(5000, easing = LinearEasing),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;twinkle&quot;&#10;    )&#10;&#10;            .background(brush = backgroundGradient)&#10;    ) {&#10;        // Draw the starry background&#10;        Canvas(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .alpha(twinkleAnimation.value)&#10;        ) {&#10;            // Draw nebulae first (they go behind stars)&#10;            nebulae.forEach { nebula -&gt;&#10;                drawNebula(nebula)&#10;            }&#10;&#10;            // Draw stars&#10;            stars.forEach { star -&gt;&#10;                drawStar(star, MaterialTheme.colorScheme.onSurface)&#10;            }&#10;        }&#10;                drawStar(star, MaterialTheme.colorScheme.onSurface)&#10;        // Content goes on top of the starry background&#10;        content()&#10;    }&#10;}&#10;&#10;private data class Star(&#10;    val x: Float,&#10;    val y: Float,&#10;    val size: Float,&#10;    val alpha: Float&#10;)&#10;&#10;private data class Nebula(&#10;    val x: Float,&#10;    val y: Float,&#10;    val radius: Float,&#10;    val color: Color&#10;)&#10;&#10;private fun DrawScope.drawStar(star: Star, starColor: Color = Color.White) {&#10;    val x = star.x * size.width&#10;    val y = star.y * size.height&#10;&#10;    drawCircle(&#10;        color = starColor,&#10;        radius = star.size,&#10;        center = Offset(x, y),&#10;        alpha = star.alpha&#10;    )&#10;}&#10;&#10;private fun DrawScope.drawNebula(nebula: Nebula) {&#10;    val x = nebula.x * size.width&#10;    val y = nebula.y * size.height&#10;    val radius = min(size.width, size.height) * nebula.radius&#10;&#10;    drawCircle(&#10;        color = nebula.color,&#10;        radius = radius,&#10;        center = Offset(x, y)&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package space.o4bit.projectasteria.ui.components&#10;&#10;import androidx.compose.animation.core.LinearEasing&#10;import androidx.compose.animation.core.RepeatMode&#10;import androidx.compose.animation.core.animateFloat&#10;import androidx.compose.animation.core.infiniteRepeatable&#10;import androidx.compose.animation.core.rememberInfiniteTransition&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.BoxScope&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import kotlin.math.min&#10;import kotlin.random.Random&#10;&#10;/**&#10; * A composable that creates a starry space background with subtle animation&#10; * that aligns with Material 3 theming&#10; */&#10;@Composable&#10;fun StarryBackground(&#10;    modifier: Modifier = Modifier,&#10;    starsCount: Int = 100,&#10;    content: @Composable BoxScope.() -&gt; Unit&#10;) {&#10;    // Get theme colors to use for the space background gradient&#10;    val surfaceColor = MaterialTheme.colorScheme.surface&#10;    val primaryColor = MaterialTheme.colorScheme.primary&#10;    val secondaryColor = MaterialTheme.colorScheme.secondary&#10;    val tertiaryColor = MaterialTheme.colorScheme.tertiary&#10;&#10;    // Background gradient using theme colors for better integration with Material 3&#10;    val backgroundGradient = Brush.verticalGradient(&#10;        colors = listOf(&#10;            surfaceColor.copy(alpha = 0.95f),   // Slightly transparent surface color&#10;            surfaceColor,                       // Base surface color&#10;            surfaceColor.copy(alpha = 0.9f)     // Slightly different shade for gradient effect&#10;        )&#10;    )&#10;&#10;    // Generate random stars positions&#10;    val stars = remember {&#10;        List(starsCount) {&#10;            Star(&#10;                x = Random.nextFloat(),&#10;                y = Random.nextFloat(),&#10;                size = Random.nextFloat() * 2.5f + 0.5f,&#10;                alpha = Random.nextFloat() * 0.7f + 0.3f&#10;            )&#10;        }&#10;    }&#10;&#10;    // Nebula positions for subtle color accents using theme colors&#10;    val nebulae = remember {&#10;        List(3) {&#10;            Nebula(&#10;                x = Random.nextFloat(),&#10;                y = Random.nextFloat(),&#10;                radius = Random.nextFloat() * 0.2f + 0.1f,&#10;                color = when (it % 3) {&#10;                    0 -&gt; primaryColor.copy(alpha = 0.1f)     // Very subtle primary color&#10;                    1 -&gt; secondaryColor.copy(alpha = 0.1f)   // Very subtle secondary color&#10;                    else -&gt; tertiaryColor.copy(alpha = 0.1f) // Very subtle tertiary color&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Animation for twinkling stars&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;starTwinkle&quot;)&#10;    val twinkleAnimation = infiniteTransition.animateFloat(&#10;        initialValue = 0.7f,&#10;        targetValue = 1f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(5000, easing = LinearEasing),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;twinkle&quot;&#10;    )&#10;&#10;    // Extract the color for stars here so it can be used in the Canvas&#10;    val starColor = MaterialTheme.colorScheme.onSurface&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .background(brush = backgroundGradient)&#10;    ) {&#10;        // Draw the starry background&#10;        Canvas(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .alpha(twinkleAnimation.value)&#10;        ) {&#10;            // Draw nebulae first (they go behind stars)&#10;            nebulae.forEach { nebula -&gt;&#10;                drawNebula(nebula)&#10;            }&#10;&#10;            // Draw stars&#10;            stars.forEach { star -&gt;&#10;                drawStar(star, starColor)&#10;            }&#10;        }&#10;&#10;        // Content goes on top of the starry background&#10;        content()&#10;    }&#10;}&#10;&#10;private data class Star(&#10;    val x: Float,&#10;    val y: Float,&#10;    val size: Float,&#10;    val alpha: Float&#10;)&#10;&#10;private data class Nebula(&#10;    val x: Float,&#10;    val y: Float,&#10;    val radius: Float,&#10;    val color: Color&#10;)&#10;&#10;private fun DrawScope.drawStar(star: Star, starColor: Color = Color.White) {&#10;    val x = star.x * size.width&#10;    val y = star.y * size.height&#10;&#10;    drawCircle(&#10;        color = starColor,&#10;        radius = star.size,&#10;        center = Offset(x, y),&#10;        alpha = star.alpha&#10;    )&#10;}&#10;&#10;private fun DrawScope.drawNebula(nebula: Nebula) {&#10;    val x = nebula.x * size.width&#10;    val y = nebula.y * size.height&#10;    val radius = min(size.width, size.height) * nebula.radius&#10;&#10;    drawCircle(&#10;        color = nebula.color,&#10;        radius = radius,&#10;        center = Offset(x, y)&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/theme/Theme.kt" />
              <option name="originalContent" value="package space.o4bit.projectasteria.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;import com.google.accompanist.systemuicontroller.rememberSystemUiController&#10;&#10;/**&#10;&#10; * Simplified theme implementation that only uses dynamic Material You theming&#10; * with a light/dark toggle.&#10;&#10;            systemUiController.setSystemBarsColor(&#10;                color = Color.Transparent,&#10;                darkIcons = !darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package space.o4bit.projectasteria.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;import com.google.accompanist.systemuicontroller.rememberSystemUiController&#10;&#10;// Define color schemes&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = CosmicAccent,&#10;    secondary = StardustSilver,&#10;    tertiary = NebulaViolet,&#10;    background = SpaceBlack,&#10;    surface = DeepSpace,&#10;    onPrimary = Color.Black,&#10;    onSecondary = Color.Black,&#10;    onTertiary = Color.Black,&#10;    onBackground = StardustSilver,&#10;    onSurface = StardustSilver&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = CosmicAccent,&#10;    secondary = StardustSilver,&#10;    tertiary = NebulaViolet,&#10;    background = Color.White,&#10;    surface = Color(0xFFF8F9FA),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = SpaceBlack,&#10;    onSurface = SpaceBlack&#10;)&#10;&#10;/**&#10; * Simplified theme implementation that only uses dynamic Material You theming&#10; * with a light/dark toggle.&#10; */&#10;@Composable&#10;fun ProjectAsteriaTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    // Dynamic color is available on Android 12+&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    // Use dynamic color scheme if available (Android 12+)&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;        // For devices below Android 12, use static color schemes&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;&#10;    // Apply edge-to-edge design with the system UI controller&#10;    val systemUiController = rememberSystemUiController()&#10;    val view = LocalView.current&#10;&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;&#10;            // Set system bars to be transparent for edge-to-edge&#10;            WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;            systemUiController.setSystemBarsColor(&#10;                color = Color.Transparent,&#10;                darkIcons = !darkTheme&#10;            )&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        typography = Typography,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/theme/ThemedApp.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/space/o4bit/projectasteria/ui/theme/ThemedApp.kt" />
              <option name="updatedContent" value="package space.o4bit.projectasteria.ui.theme&#10;&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.platform.LocalContext&#10;import space.o4bit.projectasteria.data.preferences.ThemePreferencesRepository&#10;&#10;/**&#10; * A composable wrapper that applies the user's theme preference to the app.&#10; * Simplified to only handle light/dark mode toggle with system default option.&#10; */&#10;@Composable&#10;fun ThemedApp(content: @Composable () -&gt; Unit) {&#10;    val context = LocalContext.current&#10;    val themePreferences = ThemePreferencesRepository(context)&#10;    &#10;    // Get user preferences for theme&#10;    val followSystem by themePreferences.followSystem.collectAsState(initial = true)&#10;    val isDarkMode by themePreferences.isDarkMode.collectAsState(initial = false)&#10;    &#10;    // Determine if we should use dark theme&#10;    val darkTheme = if (followSystem) {&#10;        // Follow system default&#10;        isSystemInDarkTheme()&#10;    } else {&#10;        // Use user preference&#10;        isDarkMode&#10;    }&#10;&#10;    // Apply theme with dynamic Material You colors&#10;    ProjectAsteriaTheme(darkTheme = darkTheme) {&#10;        content()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_asteria_logo.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_asteria_logo.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;108dp&quot;&#10;    android:height=&quot;108dp&quot;&#10;    android:viewportWidth=&quot;108&quot;&#10;    android:viewportHeight=&quot;108&quot;&gt;&#10;    &#10;    &lt;!-- Deep space background --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#0A1128&quot;&#10;        android:pathData=&quot;M0,0h108v108h-108z&quot; /&gt;&#10;    &#10;    &lt;!-- Large nebula glow --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#304BA3&quot;&#10;        android:pathData=&quot;M54,54m-35,0a35,35 0,1 1,70 0a35,35 0,1 1,-70 0&quot;&#10;        android:alpha=&quot;0.4&quot; /&gt;&#10;    &#10;    &lt;!-- Smaller nebula accent --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#5B42F3&quot;&#10;        android:pathData=&quot;M40,64m-20,0a20,20 0,1 1,40 0a20,20 0,1 1,-40 0&quot;&#10;        android:alpha=&quot;0.3&quot; /&gt;&#10;    &#10;    &lt;!-- Star --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M54,36m-3,0a3,3 0,1 1,6 0a3,3 0,1 1,-6 0&quot; /&gt;&#10;    &#10;    &lt;!-- Star --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M72,52m-2,0a2,2 0,1 1,4 0a2,2 0,1 1,-4 0&quot; /&gt;&#10;    &#10;    &lt;!-- Star --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M38,42m-2,0a2,2 0,1 1,4 0a2,2 0,1 1,-4 0&quot; /&gt;&#10;    &#10;    &lt;!-- Star --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M83,72m-1.5,0a1.5,1.5 0,1 1,3 0a1.5,1.5 0,1 1,-3 0&quot; /&gt;&#10;    &#10;    &lt;!-- Star --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M27,68m-1.5,0a1.5,1.5 0,1 1,3 0a1.5,1.5 0,1 1,-3 0&quot; /&gt;&#10;    &#10;    &lt;!-- Star --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M60,78m-1,0a1,1 0,1 1,2 0a1,1 0,1 1,-2 0&quot; /&gt;&#10;    &#10;    &lt;!-- Star --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M42,82m-1,0a1,1 0,1 1,2 0a1,1 0,1 1,-2 0&quot; /&gt;&#10;    &#10;    &lt;!-- Star --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M76,36m-1,0a1,1 0,1 1,2 0a1,1 0,1 1,-2 0&quot; /&gt;&#10;    &#10;    &lt;!-- Planet --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#00B0FF&quot;&#10;        android:pathData=&quot;M54,54m-18,0a18,18 0,1 1,36 0a18,18 0,1 1,-36 0&quot; /&gt;&#10;    &#10;    &lt;!-- Planet ring --&gt;&#10;    &lt;path&#10;        android:strokeColor=&quot;#E1E1E6&quot;&#10;        android:strokeWidth=&quot;1.5&quot;&#10;        android:strokeLineCap=&quot;round&quot;&#10;        android:pathData=&quot;M36,54c0,0 9,-4 18,-4s18,4 18,4s-9,4 -18,4s-18,-4 -18,-4z&quot;&#10;        android:alpha=&quot;0.7&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;    id(&quot;com.google.gms.google-services&quot;) version &quot;4.4.3&quot; apply false&#10;    id(&quot;com.google.android.gms.oss-licenses-plugin&quot;) version &quot;0.10.6&quot; apply false&#10;    id(&quot;com.google.android.gms.oss-licenses-plugin&quot;) version &quot;0.10.6&quot; apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;    id(&quot;com.google.gms.google-services&quot;) version &quot;4.4.3&quot; apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/wrapper/gradle-wrapper.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/wrapper/gradle-wrapper.properties" />
              <option name="originalContent" value="#Tue Aug 05 19:13:30 CEST 2025&#10;distributionBase=GRADLE_USER_HOME&#10;distributionPath=wrapper/dists&#10;distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip&#10;zipStoreBase=GRADLE_USER_HOME&#10;zipStorePath=wrapper/dists&#10;" />
              <option name="updatedContent" value="#Tue Aug 05 19:13:30 CEST 2025&#13;&#10;distributionBase=GRADLE_USER_HOME&#13;&#10;distributionPath=wrapper/dists&#13;&#10;distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.3-bin.zip&#13;&#10;zipStoreBase=GRADLE_USER_HOME&#13;&#10;zipStorePath=wrapper/dists" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/local.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/local.properties" />
              <option name="originalContent" value="## This file is automatically generated by Android Studio.&#10;# Do not modify this file -- YOUR CHANGES WILL BE ERASED!&#10;#&#10;# This file should *NOT* be checked into Version Control Systems,&#10;# as it contains information specific to your local configuration.&#10;#&#10;# Location of the SDK. This is only used by Gradle.&#10;# For customization when using a Version Control System, please read the&#10;# header note.&#10;sdk.dir=C\:\\Users\\O4bit\\AppData\\Local\\Android\\Sdk&#10;&#10;# API Keys&#10;nasa.api.key=&quot;x6QtRi5bhEQg0i5dpQUxJ6vsnBRvpZXrksZajPlI&quot;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="## This file is automatically generated by Android Studio.&#10;# Do not modify this file -- YOUR CHANGES WILL BE ERASED!&#10;#&#10;# This file should *NOT* be checked into Version Control Systems,&#10;# as it contains information specific to your local configuration.&#10;#&#10;# Location of the SDK. This is only used by Gradle.&#10;# For customization when using a Version Control System, please read the&#10;# header note.&#10;sdk.dir=C\:\\Users\\O4bit\\AppData\\Local\\Android\\Sdk&#10;&#10;# API Keys&#10;nasa.api.key=x6QtRi5bhEQg0i5dpQUxJ6vsnBRvpZXrksZajPlI" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>